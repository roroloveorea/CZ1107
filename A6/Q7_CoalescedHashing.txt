#include <stdio.h>
#include <stdlib.h>

#define TABLESIZE 37
#define PRIME     13

enum Marker {EMPTY,USED};

typedef struct _slot{
    int key;
    enum Marker indicator;
    int next;
} HashSlot;

int HashInsert(int key, HashSlot hashTable[]);
int HashFind(int key, HashSlot hashTable[]);

int hash(int key)
{
    return (key % TABLESIZE);
}

int main()
{
    int opt;
    int i;
    int key;
    int index;
    HashSlot hashTable[TABLESIZE];

    for(i=0;i<TABLESIZE;i++){
        hashTable[i].next = -1;
        hashTable[i].key = 0;
        hashTable[i].indicator = EMPTY;
    }
    /*for (i=0;i<TABLESIZE;i++){
        HashInsert((i+1)*TABLESIZE, hashTable);
}*/

    printf("============= Hash Table ============\n");
    printf("|1. Insert a key to the hash table  |\n");
    printf("|2. Search a key in the hash table  |\n");
    printf("|3. Print the hash table            |\n");
    printf("|4. Quit                            |\n");
    printf("=====================================\n");

    printf("Enter selection: ");
    scanf("%d",&opt);
    while(opt>=1 && opt <=3){
        switch(opt){
        case 1:
            printf("Enter a key to be inserted:\n");
            scanf("%d",&key);
            index = HashInsert(key,hashTable);
            if(index <0)
                printf("Duplicate key\n");
            else if(index < TABLESIZE)
                printf("Insert %d at index %d\n",key, index);
            else
                printf("Table is full.\n");
            break;
        case 2:
            printf("Enter a key for searching in the HashTable:\n");
            scanf("%d",&key);
            index = HashFind(key, hashTable);

            if(index!=-1)
                printf("%d is found at index %d.\n",key,index);
            else
                printf("%d is not found.\n",key);
            break;

        case 3:
            printf("index:\t key \t next\n");
            for(i=0;i<TABLESIZE;i++) printf("%d\t%d\t%d\n",i, hashTable[i].key,hashTable[i].next);
            break;
        }
        printf("Enter selection: ");
        scanf("%d",&opt);
    }
    return 0;
}

int HashInsert(int key, HashSlot hashTable[])
{
 // Write your code here
 int index,preindex=-1, probe=0, count=0, counting = 0, i, counter=0;
//index = (hash(key)+probe)%TABLESIZE;
if(HashFind(key, hashTable)!=-1)
    return -1;
for(i=0;i<TABLESIZE;i++)
{
    if(hashTable[i].indicator==USED)
    {
        counter++;
    }
    if(counter==TABLESIZE)
    {
      return 100;
    }

}
index = hash(key);
while(count<TABLESIZE)
{

if(hashTable[index].indicator==EMPTY)
{
    hashTable[index].key = key;
    hashTable[index].indicator = USED;
    if(preindex!=-1)
        hashTable[preindex].next=index;
    return index;
}
if(hashTable[index].indicator==USED)
{
  if(hashTable[index].next==-1&&hashTable[(hash(key)+probe)%TABLESIZE].indicator==USED)//dont have next but probed slot is USED
  {
  preindex = index;
  while(hashTable[(hash(key)+probe)%TABLESIZE].indicator==USED)
  {
      probe++;
      if(hashTable[(hash(key)+probe)%TABLESIZE].indicator==EMPTY)
      {
          index = (hash(key)+probe)%TABLESIZE;
          break;
      }
  }

  }
  else if(hashTable[index].next==-1&&hashTable[(hash(key)+probe)%TABLESIZE].indicator==EMPTY)//dont have next and probed slot is empty
  {
      preindex = index;
  }

  else //have next
  {
      preindex= index;
      while(hashTable[index].next!=-1)
      {
          //counting++;
          index = hashTable[index].next;
          //if(counting>TABLESIZE)
            //break;
      }

  }

}

count++;
}
return count;
}

int HashFind(int key, HashSlot hashTable[])
{
 // Write your code here
 int index=0,probe=0;
    //(H0(k) + 1) mod h

 while(index<TABLESIZE)
 {
 //index = (hash(key)+probe)%TABLESIZE;
 if(hashTable[index].key == key)
    return index;
 index++;
 /*else
 {
     probe++;
 }
*/
 }
 return -1;
}
