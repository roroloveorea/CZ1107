#include <stdio.h>
#include <stdlib.h>



typedef struct _listnode
{
    int vertex;
	struct _listnode *next;
} ListNode;
typedef ListNode StackNode;

typedef struct _graph{
    int V;
    int E;
    ListNode **list;
}Graph;

typedef ListNode QueueNode;

typedef struct _queue{
   int size;
   QueueNode *head;
   QueueNode *tail;
} Queue;

typedef struct _stack
{
	int size;
	StackNode *head;
} Stack;

void insertAdjVertex(ListNode** AdjList,int vertex);
void removeAdjVertex(ListNode** AdjList,int vertex);
int matching(Graph g,int source,int sink, int* parenttracker);

void enqueue(Queue *qPtr, int item);
int dequeue(Queue *qPtr);
int getFront(Queue q);
int isEmptyQueue(Queue q);
void removeAllItemsFromQueue(Queue *qPtr);
void printQ(QueueNode *cur);
//////STACK///////////////////////////////////////////
void push(Stack *sPtr, int vertex);
int pop(Stack *sPtr);

int isEmptyStack(Stack s);
void removeAllItemsFromStack(Stack *sPtr);
void printGraphList(Graph g);
int BFS (Graph g, int v, int w,int* parenttracker);
//////////////////////////////////

int main()
{
    int Prj, Std, Mtr; //Project, Student and Mentor;
    int maxMatch;
    scanf("%d %d %d", &Std, &Prj, &Mtr);
    int i;
    int np,nm;
    int u,v;
    ListNode *temp;

    int INFINITE = 9999;
    //build graph
	Graph g;
	g.V = Std+Prj+Mtr+2+Std;

    int parenttracker[g.V+1];
	for(i=0;i<g.V+1;i++)
        parenttracker[i] = 0;

	g.list = (ListNode **) malloc(g.V*sizeof(ListNode *));
	for(i=0;i<g.V;i++)
        g.list[i] = NULL;


    int k = 2;
    //connect source to Projects
    for(i=0;i<Prj;i++)
    {
         if(g.list[0]==NULL)
         {
            g.list[0] = (ListNode *)malloc(sizeof(ListNode));
            g.list[0]->vertex = Std+k;
            g.list[0]->next = NULL;
            k++;
         }
         else{
            temp = (ListNode *)malloc(sizeof(ListNode));
            temp->next = g.list[0];
            temp->vertex = Std+k;
            g.list[0] = temp;
            k++;
        }

    }

    for(i=Std+Prj+1+Std;i<Mtr+Prj+Std+1+Std;i++)
    {
         if(g.list[i]==NULL)
         {
            g.list[i] = (ListNode *)malloc(sizeof(ListNode));
            g.list[i]->vertex = Mtr+Prj+Std+Std+2;
            g.list[i]->next = NULL;
            k++;
         }
         else
         {
            temp = (ListNode *)malloc(sizeof(ListNode));
            temp->next = g.list[i];
            temp->vertex = Mtr+Prj+Std+Std+2;
            g.list[i] = temp;
            k++;
        }
    }

    int p,mentor;

    for(i=1; i<Std+1; i++)
    {
        scanf("%d %d",&np,&nm);

        for(k=0;k<np;k++)
        {
            scanf("%d",&p);

            if(g.list[p+Std]==NULL)
            {
                g.list[p+Std] = (ListNode *)malloc(sizeof(ListNode));
                g.list[p+Std]->vertex = i+1;
                g.list[p+Std]->next = NULL;
            }
            else
            {
                temp = (ListNode *)malloc(sizeof(ListNode));
                temp->next = g.list[p+Std];
                temp->vertex = i+1 ;
                g.list[p+Std] = temp;
            }
        }

        //connect students to studentclone

                if(g.list[i]==NULL)
                {
                    g.list[i] = (ListNode *)malloc(sizeof(ListNode));
                    g.list[i]->vertex = i+Std+Prj+1;
                    g.list[i]->next = NULL;
                }
                else
                {
                    temp = (ListNode *)malloc(sizeof(ListNode));
                    temp->next = g.list[i];
                    temp->vertex = +Std+Prj+1;
                    g.list[i] = temp;
                }


  
            for(u=0; u<nm; u++)
            {         //printf("debug");
                scanf("%d",&mentor);

                if(g.list[i+Std+Prj]==NULL)
                {
                    g.list[i+Std+Prj] = (ListNode *)malloc(sizeof(ListNode));
                    g.list[i+Std+Prj]->vertex = mentor+Std+Prj+Std+1;
                    g.list[i+Std+Prj]->next = NULL;
                }
                else
                {
                    temp = (ListNode *)malloc(sizeof(ListNode));
                    temp->next = g.list[i+Std+Prj];
                    temp->vertex = mentor+Std+Prj+Std+1;
                    g.list[i+Std+Prj] = temp;
                }
            }
    }

    printGraphList(g);

    maxMatch = matching(g,1,g.V,parenttracker);

   


    printf("\n%d\n", maxMatch);
    return 0;
}
void printGraphList(Graph g){
    int i;
    ListNode* temp;

    for(i=0;i<g.V;i++)
    {
        //printf("%d:\t",i+1);
        temp = g.list[i];
        
        while(temp!=NULL){
            //printf("%d -> ",temp->vertex);
                   //printf("debugging");
            temp = temp->next;
        }
        //printf("\n");
    }
}
int matching(Graph g,int source,int sink, int* parenttracker)
{
    int u,v;
    Graph resgraph = g;
    int max = 0;
    while(BFS(resgraph,source,sink,parenttracker))
    {         //printf("debug");
        v = sink;
        while(v!=source)
        {
            u = parenttracker[v-1];
       //printf("debug");
            resgraph.list[u-1]==NULL;
            resgraph.list[v-1] = resgraph.list[u-1];
            v = parenttracker[v-1];

        }
        max++;


    }




    return max;

}



void removeAdjVertex(ListNode** AdjList,int vertex)
{
    ListNode *temp, *preTemp;
    if(*AdjList != NULL)
    {
        if((*AdjList)->vertex ==vertex){
            temp = *AdjList;
            *AdjList = (*AdjList)->next;
            free(temp);
            return;
        }
        preTemp = *AdjList;
        temp = (*AdjList)->next;
        while(temp!=NULL && temp->vertex != vertex)
        {
            preTemp= temp;
            temp = temp->next;
                   //printf("debug %d",temp->vertex);
        }
        preTemp->next = temp->next;
        free(temp);
    }

}
void insertAdjVertex(ListNode** AdjList,int vertex)
{
    ListNode *temp;
    if(*AdjList==NULL)
    {
        *AdjList = (ListNode *)malloc(sizeof(ListNode));
        (*AdjList)->vertex = vertex;
        (*AdjList)->next = NULL;
    }
    else{
        temp = (ListNode *)malloc(sizeof(ListNode));
        temp->vertex = vertex;
        temp->next = *AdjList;
        *AdjList = temp;
    }
}


int dequeue(Queue *qPtr) {
    if(qPtr==NULL || qPtr->head==NULL){ //Queue is empty or NULL pointer
        return 0;
    }
    else{
       QueueNode *temp = qPtr->head;
       qPtr->head = qPtr->head->next;
       if(qPtr->head == NULL) //Queue is emptied
           qPtr->tail = NULL;

       free(temp);
       qPtr->size--;
       return 1;
    }
}
void enqueue(Queue *qPtr, int vertex) {
    QueueNode *newNode;
    newNode = (QueueNode*)malloc(sizeof(QueueNode));
    if(newNode==NULL) exit(0);

    newNode->vertex = vertex;
    newNode->next = NULL;

    if(isEmptyQueue(*qPtr))
        qPtr->head=newNode;
    else
        qPtr->tail->next = newNode;

    qPtr->tail = newNode;
    qPtr->size++;
}

int isEmptyQueue(Queue q) {
    if(q.size==0) return 1;
    else return 0;
}
int getFront(Queue q){
    return q.head->vertex;
}

void removeAllItemsFromQueue(Queue *qPtr)
{
	while(dequeue(qPtr));
}

void printQ(QueueNode *cur){
    if(cur==NULL) printf("Empty");

    while (cur != NULL){
        printf("%d ", cur->vertex);
        cur = cur->next;
    }
    printf("\n");
}

void push(Stack *sPtr, int vertex)
{
	StackNode *newNode;
    newNode= (StackNode*)malloc(sizeof(StackNode));
    newNode->vertex = vertex;
    newNode->next = sPtr->head;
    sPtr->head = newNode;
    sPtr->size++;
}

int pop(Stack *sPtr)
{
    if(sPtr==NULL || sPtr->head==NULL){
        return 0;
    }
    else{
       StackNode *temp = sPtr->head;
       sPtr->head = sPtr->head->next;
       free(temp);
       sPtr->size--;
       return 1;
    }
}




void removeAllItemsFromStack(Stack *sPtr)
{
	while(pop(sPtr));
}


int BFS (Graph rg, int source, int sink, int* parenttracker)
{
   Queue q;
   q.head=NULL;
   q.size =0;
   q.tail = NULL;
   int x;
   int vert;
   ListNode *temp;
   int Neighbours[rg.V+1];

   int visited[rg.V+1];
   for(x=0;x<rg.V+1;x++)
   {
       visited[x] = 0;
              //printf("debug");
   }

   enqueue(&q,source);
   visited[source-1] =1;
   parenttracker[source-1] = -1;

   while(!isEmptyQueue(q))
   {

       vert = getFront(q);
       dequeue(&q);

       temp = rg.list[vert-1];
       int i=0;

       while(temp!=NULL)
        {
            Neighbours[i]=temp->vertex;
            temp = temp->next;
            i++;
                   //printf("debug %d",i);
         }


         for(x=0;x<i;x++)
        {
           if(!visited[Neighbours[x]-1])
           {
               enqueue(&q,Neighbours[x]);
               visited[Neighbours[x]-1] = 1;
               parenttracker[Neighbours[x]-1]=vert;
           }

        }

   }



   if(visited[sink-1]==1)
   {

       return 1;  //path found

   }


   else
   {
       
       return 0;    //path not found
   }


}
